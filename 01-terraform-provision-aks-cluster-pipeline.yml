trigger:
 - none

pool:
  local-pool

variables:
- name: DEV_ENVIRONMENT
  value: dev 
- name: QA_ENVIRONMENT
  value: qa 

# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
       - task: Bash@3
         inputs:
            targetType: 'inline'
            script: sh terraformsetup.sh
            workingDirectory: $(System.DefaultWorkingDirectory)/Scripts
         env:
            MYSECRET: $(Foo)

       - task: Bash@3
         displayName: 'Executed sh file using filepath'
         inputs:
          targetType: filePath
          filePath: ./Scripts/terraformsetup.sh 
          failOnStderr: true
          workingDirectory: $(System.DefaultWorkingDirectory) 
       - task: PublishPipelineArtifact@1
         inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            artifact: 'terraform-menifests-out'
            publishLocation: 'pipeline'
       
      # - task: AzureCLI@2
      #   displayName: SetUp AKS
      #   name: PlanSetup
      #   inputs:
      #    azureSubscription: 'Azure subscription 1(576f8ce4-7fe6-4346-9caa-29247ef66ff4)'
      #    scriptType: ps
      #    scriptLocation: scriptPath
      #    scriptPath: '$(System.DefaultWorkingDirectory)/Scripts/terraformsetup.ps1'
      #    arguments: 'environment=dev'
       
      # - task: TerraformInstaller@1
      #   displayName: install terraform
      #   inputs:
      #    terraformVersion: latest
      # - task: TerraformCLI@0
      #   displayName: 'Check terraform version'
      #   inputs:
      #    command: version
         
      # - task: TerraformCLI@2
      #   displayName: Terraform Init
      #   inputs:
      #    command: 'init'
      #    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
      #    backendType: 'azurerm'
      #    backendServiceArm: 'terraform-aks-azurerm-svc-con'
      #    ensureBackend: true
      #    backendAzureRmResourceGroupName: 'terraform-storage-rg'
      #    backendAzureRmStorageAccountName: 'terraformstatexlskm'
      #    backendAzureRmContainerName: 'tfstatefiles'
      #    backendAzureRmKey: 'aks-base.tfstate'
       #   allowTelemetryCollection: false
       #   backendAzureRmResourceGroupLocation: 'eastus'
       #- task: TerraformCLI@0
        # displayName: Terraform Validate
         #inputs:
          #command: 'validate'
          #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          #allowTelemetryCollection: false       

- stage: DeployAKSClusters
  jobs:
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      environment: $(DEV_ENVIRONMENT)      
      strategy:
        runOnce:
          deploy:
            steps:            
            - task: DownloadSecureFile@1
              displayName: Download SSH Key
              name: sshkey
              inputs:
                secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
            - task: TerraformInstaller@1
              displayName: install terraform
              inputs:
                terraformVersion: latest
         
            - task: TerraformCLI@1
              displayName: Terraform Init
              inputs:
                command: 'init'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
                backendType: 'azurerm'
                backendServiceArm: 'terraform-aks-azurerm-svc-con'
                ensureBackend: true
                backendAzureRmResourceGroupName: 'terraform-storage-rg'
                backendAzureRmStorageAccountName: 'terraformstatexlskm'
                backendAzureRmContainerName: 'tfstatefiles'
                backendAzureRmKey: 'aks-base.tfstate'
                allowTelemetryCollection: false
                backendAzureRmResourceGroupLocation: 'eastus'
            - task: TerraformCLI@0
              displayName: Terraform Validate
              inputs:
                command: 'validate'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
                allowTelemetryCollection: false       

            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
                environmentServiceName: 'terraform-aks-azurerm-svc-con'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(System.DefaultWorkingDirectory)/terraform-manifests/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
                environmentServiceName: 'terraform-aks-azurerm-svc-con'
                commandOptions: '$(System.DefaultWorkingDirectory)/terraform-manifests/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false